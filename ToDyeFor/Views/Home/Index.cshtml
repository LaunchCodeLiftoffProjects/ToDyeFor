@{
    ViewData["Title"] = "Home Page";
}

@using ToDyeFor.ViewModel;
@model calculateMXRecipeViewModel;

<div class="text-center">
    Welcome to ToDyeFor! Calculate your recipe below or <a href="Home/About">click here</a> to learn more about us.
    <div id="calculator">

        <form id="calculator" asp-controller="Recipe" asp-action="Calculator" method="post">
            <div class="tab">
                <p>
                    <label for="fabric">Choose Fabric: </label>
                    <select id="fabric">
                        <option value="optionone">Silk</option>
                        <option value="optiontwo">Muslin</option>
                        <option value="optionthree">Cotton</option>
                        <option value="optionfour">Wool</option>
                    </select>
                </p>
            </div>
            @*step 1*@
            <div class="tab">
                <p>
                    <label asp-for="DyeColor">Choose Dye: </label>
                    <select id="dye">
                        <option value="pink" asp-for="DyeColor">Pink</option>
                        <option value="red" asp-for="DyeColor">Red</option>
                        <option value="orange" asp-for="DyeColor">Orange</option>
                        <option value="yellow" asp-for="DyeColor">Yellow</option>
                        <option value="green" asp-for="DyeColor">Green</option>
                        <option value="blue" asp-for="DyeColor">Blue</option>
                        <option value="purple" asp-for="DyeColor">Purple</option>
                        <option value="black" asp-for="DyeColor">Black</option>
                        <option value="white" asp-for="DyeColor">White</option>
                    </select>
                </p>
            </div>
            @*step 2*@
            <div class="tab">
                <p>
                    <label asp-for="FabricWeight">Amount of Fabric (in grams): </label>

                </p>
                <p>
                    <div class="slidecontainer">
                        <input asp-for="FabricWeight" type="range" min="0" max="1000" value="500" class="slider" id="quantityRange">
                        <br>Value: <span id="amount"></span> grams
                    </div>
                </p>
            </div>
            @*step 3*@
            <div class="tab">
                <p>
                    <label asp-for="ShadeDepth">
                        Depth of Shade:
                    </label>

                    <div class="slidecontainer">
                        <input asp-for="ShadeDepth" type="range" min="0" max="8" value="5" class="slider" id="depthRange">
                        <br>Value: <span id="depth"></span>%

                    </div>
                </p>
            </div>
            @*step 4*@
            <div class="tab">
                <p>
                    Name your recipe:
                    <label asp-for="Name">
                        <input asp-for="Name">
                    </label>
                </p>
            </div>
            <div style="overflow:auto;">
                <div style="float:right;">
                    <button type="button" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
                    <button type="button" id="nextBtn" onclick="nextPrev(1)">Next</button>
                </div>
            </div>

            <!-- Circles which indicate the steps of the form: -->
            <div style="text-align:center;margin-top:40px;">
                <span class="step"></span>
                <span class="step"></span>
                <span class="step"></span>
                <span class="step"></span>
            </div>
        </form>

    </div>
    <script>
        var currentTab = 0; // Current tab is set to be the first tab (0)
        showTab(currentTab); // Display the current tab

        function showTab(n) {
            // This function will display the specified tab of the form ...
            var x = document.getElementsByClassName("tab");
            x[n].style.display = "block";
            // ... and fix the Previous/Next buttons:
            if (n == 0) {
                document.getElementById("prevBtn").style.display = "none";
            } else {
                document.getElementById("prevBtn").style.display = "inline";
            }
            if (n == (x.length - 1)) {
                document.getElementById("nextBtn").innerHTML = "Submit";
            } else {
                document.getElementById("nextBtn").innerHTML = "Next";
            }
            // ... and run a function that displays the correct step indicator:
            fixStepIndicator(n)
        }

        function nextPrev(n) {
            // This function will figure out which tab to display
            var x = document.getElementsByClassName("tab");
            // Exit the function if any field in the current tab is invalid:
            if (n == 1 && !validateForm()) return false;
            // Hide the current tab:
            x[currentTab].style.display = "none";
            // Increase or decrease the current tab by 1:
            currentTab = currentTab + n;
            // if you have reached the end of the form... :
            if (currentTab >= x.length) {
                //...the form gets submitted:
                document.getElementById("calculator").viewResults();
                return false;
            }
            // Otherwise, display the correct tab:
            showTab(currentTab);
        }

        

        function validateForm() {
            // This function deals with validation of the form fields
            var x, y, i, valid = true;
            x = document.getElementsByClassName("tab");
            y = x[currentTab].getElementsByTagName("input");
            // A loop that checks every input field in the current tab:
            for (i = 0; i < y.length; i++) {
                // If a field is empty...
                if (y[i].value == "") {
                    // add an "invalid" class to the field:
                    y[i].className += " invalid";
                    // and set the current valid status to false:
                    valid = false;
                }
            }
            // If the valid status is true, mark the step as finished and valid:
            if (valid) {
                document.getElementsByClassName("step")[currentTab].className += " finish";
            }
            return valid; // return the valid status
        }

        function fixStepIndicator(n) {
            // This function removes the "active" class of all steps...
            var i, x = document.getElementsByClassName("step");
            for (i = 0; i < x.length; i++) {
                x[i].className = x[i].className.replace(" active", "");
            }
            //... and adds the "active" class to the current step:
            x[n].className += " active";
        }

        // displays current value of sliders

        var slider1 = document.getElementById("quantityRange");
        var output1 = document.getElementById("amount");

        output1.innerHTML = slider1.value;
        slider1.oninput = function () {
            output1.innerHTML = this.value;
        }

        var slider2 = document.getElementById("depthRange");
        var output2 = document.getElementById("depth");
        output2.innerHTML = slider2.value;
        slider2.oninput = function () {
            output2.innerHTML = this.value;
        }

        // what happens when the click the submit button
        function viewResults() {
            var results = document.getElementById("calculator").submit();
            results.onclick
            console.log("Results" + results);
            //return results;            
        }


    </script>
</div>
